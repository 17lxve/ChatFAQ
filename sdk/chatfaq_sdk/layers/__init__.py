from ir_qa_dev import RetrieverAnswerer
from logging import getLogger

logger = getLogger(__name__)


class Layer:
    """
    Representation of all the future stack's layers. Implementing a new layer should inherit form this
    """

    _type = None

    def to_json(self):
        """
        Used to represent the layer as a dictionary which will be sent through the WS to the ChatFAQ's back-end server
        :return:
            dict
                A json compatible dict
        """
        raise NotImplementedError


class Text(Layer):
    """
    Simplest layer representing raw text
    """

    _type = "text"

    def __init__(self, payload):
        self.payload = payload

    def to_json(self):
        return [{"type": self._type, "payload": self.payload}]


class LMGeneratedText(Layer):
    """
    Layer representing text generated by a language model
    """

    _type = "lm_generated_text"
    loaded_model = None

    @classmethod
    def load_model(cls, model_name):
        if cls.loaded_model is None:
            cls.loaded_model = {}
        if model_name not in cls.loaded_model:
            """
            logger.info("Loafing model...")
            retriever_answerer = RetrieverAnswerer(
                os.path.dirname(os.path.abspath(__file__)) + '/data/chanel.csv',
                model_name,
                "title",
                "text",
                use_cpu=True
            )
            logger.info("...model loaded.")
            """
            pass
        return cls.loaded_model[model_name]

    def __init__(self, payload, model_name):
        self.payload = payload
        self.model_name = model_name

    def to_json(self):
        return [{"type": self._type, "payload": self.payload, "model_name": self.model_name}]
