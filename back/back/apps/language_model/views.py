import csv

from django.http import HttpResponse
from django.http import JsonResponse
from rest_framework import viewsets
from rest_framework.decorators import action
from .tasks import initiate_crawl
from .models import KnowledgeBase, KnowledgeItem, LLMConfig, AutoGeneratedTitle
from .serializers import (
    KnowledgeBaseSerializer,
    KnowledgeItemSerializer,
    LLMConfigSerializer,
    AutoGeneratedTitleSerializer, KnowledgeBaseFromUrlSerializer,
)


class KnowledgeBaseAPIViewSet(viewsets.ModelViewSet):
    queryset = KnowledgeBase.objects.all()
    serializer_class = KnowledgeBaseSerializer

    @action(detail=True)
    def download_csv(self, request, *args, **kwargs):
        """
        A view to download all the knowledge base's items as a csv file:
        """
        kb = KnowledgeBase.objects.get(pk=kwargs["pk"])
        response = HttpResponse(content_type="text/csv")
        response["Content-Disposition"] = 'attachment; filename={}'.format(
            kb.name + ".csv"
        )
        response.write(kb.to_csv())
        return response

    @action(methods=("POST", ), detail=False, serializer_class=KnowledgeBaseFromUrlSerializer)
    def create_from_url(self, request, *args, **kwargs):
        """
        A view to download all the knowledge base's items as a csv file:
        """
        s = KnowledgeBaseFromUrlSerializer(data=request.data)
        s.is_valid(raise_exception=True)
        url = s.validated_data["url"]
        del s.validated_data["url"]
        kb = s.save()
        initiate_crawl.delay(kb.id, url)
        return JsonResponse(KnowledgeBaseSerializer(kb).data, status=201)


class KnowledgeItemAPIViewSet(viewsets.ModelViewSet):
    queryset = KnowledgeItem.objects.all()
    serializer_class = KnowledgeItemSerializer
    filterset_fields = ["dataset__id"]


class AutoGeneratedTitleAPIViewSet(viewsets.ModelViewSet):
    queryset = AutoGeneratedTitle.objects.all()
    serializer_class = AutoGeneratedTitleSerializer
    filterset_fields = ["item__id"]


class LLMConfigAPIViewSet(viewsets.ModelViewSet):
    queryset = LLMConfig.objects.all()
    serializer_class = LLMConfigSerializer
