from django.http import HttpResponse, JsonResponse
from rest_framework import viewsets
from rest_framework.decorators import action

from back.apps.language_model.models.data import KnowledgeBase, KnowledgeItem, AutoGeneratedTitle
from back.apps.language_model.serializers.data import KnowledgeBaseSerializer, KnowledgeItemSerializer, \
    AutoGeneratedTitleSerializer

from back.apps.language_model.tasks import generate_new_intents_task, generate_titles


class KnowledgeBaseAPIViewSet(viewsets.ModelViewSet):
    queryset = KnowledgeBase.objects.all()
    serializer_class = KnowledgeBaseSerializer

    def get_queryset(self):
        if self.kwargs.get("pk"):
            kb = KnowledgeBase.objects.filter(name=self.kwargs["pk"]).first()
            if kb:
                self.kwargs["pk"] = str(kb.pk)
        return super().get_queryset()

    @action(detail=True, url_name="download-csv", url_path="download-csv")
    def download_csv(self, request, *args, **kwargs):
        """
        A view to download all the knowledge base's items as a csv file:
        """
        kb = KnowledgeBase.objects.filter(name=kwargs["pk"]).first()
        if not kb:
            kb = KnowledgeBase.objects.get(pk=kwargs["pk"])
        response = HttpResponse(content_type="text/csv")
        response["Content-Disposition"] = 'attachment; filename={}'.format(
            kb.name + ".csv"
        )
        response.write(kb.to_csv())
        return response

    @action(detail=True, url_name="generate-titles", url_path="generate-titles", methods=["POST"])
    def generate_titles(self, request, *args, **kwargs):
        """
        A view to generate titles for a Knowledge Base:
        """
        print(args)
        print(kwargs)
        kb = KnowledgeBase.objects.filter(name=kwargs["pk"]).first()
        if not kb:
            return HttpResponse("Knowledge Base not found", status=404)
        n_titles = request.data['n_titles'] if 'n_titles' in request.data else 10
        print(f"n_titles: {n_titles}")
        generate_titles.delay(kb.id, n_titles)
        return JsonResponse({"message": "Task started"})

    @action(detail=True, url_name="get-new-intents", url_path="get-new-intents", methods=["POST"])
    def get_new_intents(self, request, *args, **kwargs):
        """
        A view to get new possible intents from a Knowledge Base:
        """
        kb = KnowledgeBase.objects.filter(name=kwargs["pk"]).first()
        if not kb:
            return HttpResponse("Knowledge Base not found", status=404)
        generate_new_intents_task.delay(kb.id)
        return JsonResponse({"message": "Task started"})



class KnowledgeItemAPIViewSet(viewsets.ModelViewSet):
    queryset = KnowledgeItem.objects.all()
    serializer_class = KnowledgeItemSerializer
    filterset_fields = ["knowledge_base__id", "knowledge_base__name"]

    def create(self, request, *args, **kwargs):
        """
        A view to create a new knowledge item:
        """
        return super().create(request, *args, **kwargs)


class AutoGeneratedTitleAPIViewSet(viewsets.ModelViewSet):
    queryset = AutoGeneratedTitle.objects.all()
    serializer_class = AutoGeneratedTitleSerializer
    filterset_fields = ["knowledge_item__id", "knowledge_item__name"]
